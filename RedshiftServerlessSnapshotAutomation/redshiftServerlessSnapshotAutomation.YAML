AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function to automate the snapshot of redshift serverless namespace.
Parameters:
  inputNamespace:
    Description: Enter the list of namespace for which snapshot needs to be created
    Type: String
    Default: 'namespace-rs-64, namespace-rs-65'
  inputRetentionPeriod:
    Description: Enter the retention period for the snapshot
    Type: String
    Default: '10'
  inputLatestBoto3Arn:
    Description: Add the latest Boto3 in lambda layer and use the arn over here
    Type: String
    Default: 'arn:aws:lambda:us-west-2:12345678910:layer:boto3_latest:1'
  inputScheduleExpression:
    Description: Add the schedule details in format rate(value unit) unit:minute | minutes | hour | hours | day | days
    Type: String
    Default: 'rate(2 minutes)'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Input Parameters"
        Parameters:
        - inputNamespace
        - inputRetentionPeriod
        - inputLatestBoto3Arn

Resources:
  redshiftServerlessSnapshotAutomationRole :
      Type: AWS::IAM::Role
      Properties:
        Description : IAM Role for lambda functions to access Redshift and create cloud watch logs
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
        Path: /
        Policies:
            -
              PolicyName: redshiftServerlessSnapshotAutomationPolicy
              PolicyDocument :
                Version: 2012-10-17
                Statement:
                  -
                    Effect: Allow
                    Action:
                    - redshift-serverless:createsnapshot
                    Resource: "*"

  redshiftServerlessSnapshotAutomation:
    DependsOn:
        - redshiftServerlessSnapshotAutomationRole
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt 'redshiftServerlessSnapshotAutomationRole.Arn'
      Handler: index.lambda_handler
      Code:
          ZipFile: |
            import json
            import boto3
            import time
            import os
            import logging
            logger = logging.getLogger(__name__)

            def lambda_handler(event, context):

                serverless_client = boto3.client('redshift-serverless')
                namespace = os.getenv("namespace")
                retention_period = int(os.getenv("retention_period"))

                namespace_list = [namespace_list_temp.strip() for namespace_list_temp in namespace.split(",") if namespace_list_temp]

                for i_namespace in namespace_list:
                    snapshot_timestamp = time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime(time.time()))
                    snapshot_name = i_namespace + '-' + 'snapshot' + '-' + snapshot_timestamp
                    try:
                        response = serverless_client.create_snapshot(namespaceName=i_namespace,retentionPeriod=retention_period,snapshotName=snapshot_name)
                        status = 'Snapshot creation initiated for ' + i_namespace

                    except Exception as e:
                        msg = e.response['Error']['Code']
                        if msg == 'ConflictException':
                            status = 'Snapshot creation is already in progress for ' + i_namespace
                            logger.error(status)
                            continue
                        elif msg == 'ResourceNotFoundException':
                            status = i_namespace + ' namespace does not exist'
                            logger.error(status)
                            continue
                        else:
                            raise
                return status
      Description: This function will initiate creating of snapshot
      MemorySize: 128
      Timeout: 180
      Environment:
        Variables:
          namespace: !Ref inputNamespace
          retention_period: !Ref inputRetentionPeriod
      Layers:
        - !Ref inputLatestBoto3Arn
      TracingConfig:
        Mode: Active

  redshiftServerlessSnapshotAutomationScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule rule to invoke the lambda function to create the snapshot"
      ScheduleExpression: !Ref inputScheduleExpression
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "redshiftServerlessSnapshotAutomation"
              - "Arn"
          Id: "redshiftServerlessSnapshotAutomation"
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref redshiftServerlessSnapshotAutomation
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "redshiftServerlessSnapshotAutomationScheduledRule"
          - "Arn"
